# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget Xenomai::cobalt Xenomai::modechk Xenomai::legacy_bootstrap Xenomai::legacy_bootstrap_wrap Xenomai::posix Xenomai::copperplate Xenomai::vxworks Xenomai::psos Xenomai::alchemy Xenomai::smokey)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_DIR}/../../@lib_to_prefix@" ABSOLUTE)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Xenomai::cobalt
add_library(Xenomai::cobalt SHARED IMPORTED)

set_target_properties(Xenomai::cobalt PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "__COBALT__"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/cobalt;${_IMPORT_PREFIX}/${_xenomai_includedir}"
  INTERFACE_LINK_LIBRARIES "${_xenomai_threadlib};-lrt"
)

# Create imported target Xenomai::modechk
add_library(Xenomai::modechk SHARED IMPORTED)

set_target_properties(Xenomai::modechk PROPERTIES
  INTERFACE_LINK_LIBRARIES "-Wl,@${_IMPORT_PREFIX}/${_xenomai_libdir}/modechk.wrappers;${_xenomai_threadlib};-lrt"
)

# Create imported target Xenomai::legacy_bootstrap
add_library(Xenomai::legacy_bootstrap INTERFACE IMPORTED)

set_target_properties(Xenomai::legacy_bootstrap PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap-pic.o>;\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap.o>"
)

# Create imported target Xenomai::legacy_bootstrap_wrap
add_library(Xenomai::legacy_bootstrap_wrap INTERFACE IMPORTED)

set_target_properties(Xenomai::legacy_bootstrap_wrap PROPERTIES
  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:-Wl,--wrap=main,--dynamic-list=${_IMPORT_PREFIX}/${_xenomai_libdir}/dynlist.ld>"
)

# Create imported target Xenomai::posix
add_library(Xenomai::posix INTERFACE IMPORTED)

set_target_properties(Xenomai::posix PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "__COBALT_WRAP__"
  INTERFACE_LINK_LIBRARIES "-Wl,@${_IMPORT_PREFIX}/${_xenomai_libdir}/cobalt.wrappers;Xenomai::cobalt"
)

# Create imported target Xenomai::copperplate
add_library(Xenomai::copperplate SHARED IMPORTED)

set_target_properties(Xenomai::copperplate PROPERTIES
  INTERFACE_LINK_LIBRARIES "Xenomai::cobalt"
)

# Create imported target Xenomai::vxworks
add_library(Xenomai::vxworks SHARED IMPORTED)

set_target_properties(Xenomai::vxworks PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/vxworks"
  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
)

# Create imported target Xenomai::psos
add_library(Xenomai::psos SHARED IMPORTED)

set_target_properties(Xenomai::psos PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/psos"
  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
)

# Create imported target Xenomai::alchemy
add_library(Xenomai::alchemy SHARED IMPORTED)

set_target_properties(Xenomai::alchemy PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/alchemy"
  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
)

# Create imported target Xenomai::smokey
add_library(Xenomai::smokey SHARED IMPORTED)

set_target_properties(Xenomai::smokey PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/smokey"
  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/xenomai-targets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
